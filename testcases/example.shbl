enum EnumTest { value1, value2, value3 };
const pi: float = 3.14;

fn compute_area(radius: float) -> float {
	r_squared: float = radius * radius;
	return pi * r_squared;
}

fn main() {
	enum: EnumTest = EnumTest::value1;

	// pi *= 2; // Error, can't change the value of a constant

	a: int = 1;
	b: float: 1.f;
	c: float: 1.0f;
	_underscored: int = 0;

	area_c: float = compute_area(c);
	// r_squared = 20; //Error, undeclared identifier `r_squared`.

	d: float = a * b;

	accumulator: int = 0;
	for(i: int = 0; i < 10; i += 1) {
		if accumulator % 2 == 0) {
			accumulator *= 7;
		} else {
			accumulator += i;
		}
	}

	while(accumulator > 0) {
		accumulator -= i;
	}

	do {
		accumulator += 1;
	} while(accumulator < 10);

	flag: int = 0;
	switch(accumulator) {
		case 10: {
			flag = 1;
			accumulator = 0;
		}
		default:
			accumualtor = 10;
	}
}
